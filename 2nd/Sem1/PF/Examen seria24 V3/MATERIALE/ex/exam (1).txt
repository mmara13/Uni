1. Sa se scrie o functie care pentru o lista de numere intregi afiseaza suma dintre diferenta dintre doua elemente de pe pozitii consecutive daca elementele sunt divizibile cu 3 sau produsul dintre ele, altfel. 

f [1,2,3,6,7,9,3]= (1*2) +(2*3) +(3-6) +(6*7)+(7*9)+(9-3)=116
Pentru punctaj maxim scrieti si prototipul functiei cerute.


2. Sa se scrie o functie care primeste o lista de siruri de caractere si un numar intreg si verifica daca sirurile care au lungimea mai mare strict decat numarul dat contin acelasi numar de vocale si consoane.
Pentru punctaj maxim scrieti si prototipul functiei cerute.
f ["ana are mere", "mere", "pere", "unu", "aa"] 3 = False
f ["x are mere", "mere", "pere", "unu", "aa"] 3 = True

3. Sa se scrie o functie care primeste ca parametru o lista de liste de numere intregi si calculeaza produsul sumelor elementelor pare de pe fiecare linie. In rezolvarea exercitiului NU se vor folosi functiile product sau sum.
Pentru punctaj maxim scrieti si prototipul functiei cerute. 
f [[1,2,3],[4,5,6,7],[8,9]] == 2*10 * 8 == 160

4. Sa se scrie o functie care primeste un sir de caractere si o lista de siruri de caractere si verifica daca toate sirurile care au ca prefix sirul dat ca parametru, au lungime para.
Pentru punctaj maxim scrieti si prototipul functiei cerute.
f ["this is it", "this is that", "another example!"] "this" = True

5. Se dau urmatoarele tipuri de date reprezentand dictionare. Un dictionar poate fi format dintr-o intrare (cu titlu si definitie) sau o lista de dictionare (continand un titlu si lista de dictionare).

import Data.Char
type Name = String
type Def = String
data Dictionar = I Name Def
| Ld Name [Dictionar]
deriving Show

d1 = Ld "animal"[Ld "mamifer"[I "elefant" "acesta e un elefant", I "caine" "acesta este un caine", I "pisica"
"aceasta este o pisica"), I "animale domestice" "definitie"]
d2 = Ld "Animal"[Ld "Mamifer"[I "Elefant" "acesta e un elefant",I "calne" "acesta este un caine",I "piSIca"
"aceasta este o pisica"],I "animale domestice" "definitie"]
d3 = Ld "animal"[Ld "mamifer" [I "elefant" "Acesta e un Elefant", I "caine" "acesta este un caine", I "pisica"
"aceasta este o pisica"], I "animale domestice" "definitie"]

a) Sa se scrie o functie care primeste ca parametru un dictionar si intoarce lista de titluri ale intrarilor din acesta.
titluri d1 = ["elefant", "caine" "pisica" "animale domestice"]

b) Sa se instantieze clasa Eq asfel incat sa se verifice egalitatea intre doua dictionare, comparand componentele lor in ordinea in care apar. Titlurile intrarilor sunt verificate fara a tine cont de litere mici sau mari.
I "caine" "animal" == I "CaiNe" "animal" = True
I "Caine" "Animal" == I "Caine" "animal" = False

6. Sa se scrie o functie care primeste o lista de liste de numere intregi si doua numere intregi n si m si verifica daca numarul sublistelor care au doar elemente divizibile cu 3 este cuprins intre n si m (sau m si n, in functie de ordinea in care sunt date).
Ex: f [[1,2,3,4,5], [3,9,12], [33], [39,123]] 4 1 == f [[1,2,3,4,5], [3,9,12], [33], [39,123]] 1 4 == True
Pentru punctaj maxim scrieti si prototipul functiei cerute.

7. Se da urmatorul tip de date reprezentand arbori ternari cu informatia de tip intreg in radacina.
data Tree = Empty 
  | Node Int Tree Tree Tree -- arbore vid cu valoare de tip Int in radacina si 3 fii

extree :: Tree
extree = Node 4 (Node 5 Empty Empty Empty) (Node 3 Empty Empty (Node 1 Empty Empty Empty)) Empty

Sa se instantieze clasa urmatoare pentru tipul Tree. 
class ArbInfo t where
  level :: t-> Int -- intoarce inaltimea arborelui; pt un arbore vid se considera ca are inaltimea 0
  sumval:: t -> Int -- intoarce suma valorilor din arbore
  nrFrunze :: t -> Int -- intoarce nr de frunze al arborelui

exemple:
> level extree
3
> sumval extree
13
> nrFrunze extree
9