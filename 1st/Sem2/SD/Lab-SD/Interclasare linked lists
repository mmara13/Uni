#include <bits/stdc++.h>
using namespace std;
  
//clasa nod
class Node {
public:
    int data;
    Node* next;
  
    // constructor fara parametri
    Node()
    {
        data = 0;
        next = NULL;
    }
  
    // constructor cu parametru
    Node(int data)
    {
        this->data = data;
        this->next = NULL;
    }
};
  
//clasa pt lista inlantuita
class Linkedlist {
    Node* head;
  
public:
    // constructor fara parametri
    Linkedlist() { head = NULL; }
  
    // functie de inserare
    void insertNode(int);
  
    // functie de afisare
    void printList();
  
    //functie de inserare la o pozitie data
    void insertPos(Node** crt, int poz, int v);

    // functie de stergere a unui nod la o pozitie data
    void deleteNode(int);

    auto getHead() const{ //getter pt radacina
        return head;
    }
    
    int getCount(Node* head); //pt lungime

    void insertInOrder(int val); //inserare in ordine

    void reverse(); //functie de inversare

    Node* interclasare(Node* head1, Node* head2); //functie de interclasare
    
};

//functie de interclasare
Node* Linkedlist::interclasare(Node* head1, Node* head2){
    Node* mi= nullptr; //pt inceput
    Node* ms = nullptr; //pt sfarsit
    if (!head1) return head2;
    if(!head2) return head1;
    if(head1->data < head2->data){
        mi = head1;
        head1 = head1->next;
    }
    else{
        mi = head2;
        head2 = head2->next;
    }
    ms=mi;

    while(head1 && head2){
        if(head1->data < head2->data){
            ms->next = head1;
            head1 = head1->next;
        }
        else{
            ms->next = head2;
            head2 = head2->next;
        }
        ms = ms->next;
    }

    if(head1) ms->next = head1;
    else ms->next = head2;

    return mi;
}

//functie de inversare
void Linkedlist::reverse(){
    Node* crt = head;
    Node* ant = NULL;
    Node* next = NULL;
    while (crt != NULL){
        next = crt->next;
        crt->next = ant;
        ant = crt;
        crt = next;
    }
    head = ant;
}

//functie de inserare in ordine
void Linkedlist::insertInOrder(int val){
    Node* newNode = new Node(val);

    if (!head){ //inseamna ca inseram la radacina
        head = newNode;
        return;
    }

    if(val<head->data){ //daca valoarea e mai mica decat radacina, trb sa o inseram pe prima poz
        newNode->next = head;
        head = newNode;
        return;
    }

    Node* crt = head;
    while (crt->next && crt->next->data < val){
        crt = crt->next;
    }

    newNode->next = crt->next;
    crt->next = newNode;
}
Node* getNode(int data)
{
    //alocare memorie
    Node* newNode = new Node();
  
    //adaugare data
    newNode->data = data;
    newNode->next=NULL;
    return newNode;
}

//functie de inserare la o poz data
void Linkedlist::insertPos(Node** crt, int poz, int data){
    Node* newNode = new Node(data);
    Node* temp = head;
    int count = 1;
    if (poz==1){
        newNode->next = head;
        head=newNode;
        return;
    }

    while (temp != NULL && count < poz-1){
        temp = temp->next;
        count++;
    }

    if (temp==NULL){
        cout<<"Nu exista pozitia"<<'\n';
        return;
    }

    newNode->next = temp->next;
    temp->next = newNode;
}

//dimensiune lista
int Linkedlist::getCount(Node* head)
{
    int count = 0; 
    Node* current = head; 
    while (current != NULL) {
        count++;
        current = current->next;
    }
    return count;
}

// functie de stergere a unui nod la o pozitie data
void Linkedlist::deleteNode(int nodeOffset)
{
    Node *temp1 = head, *temp2 = NULL;
    int ListLen = 0;
  
    if (head == NULL) {
        cout << "lista goala" << endl;
        return;
    }
  
    // lungimea listei inlantuite
    while (temp1 != NULL) {
        temp1 = temp1->next;
        ListLen++;
    }
    //verifica daca pozitia de sters este mai mare decat lungimea listei
    if (ListLen < nodeOffset) {
        cout << "Index out of range"<< endl;
        return;
    }
  
    // declarare nod temporar
    temp1 = head;
  
    //stergerea primului nod
    if (nodeOffset == 1) {
  
        //actualizare radacina
        head = head->next;
        delete temp1;
        return;
    }
  
    //caut nodul care trebuie sters
    while (nodeOffset-- > 1){
        temp2 = temp1;
        temp1 = temp1->next;
    }
    //schimb next pointer-ul nodului anterior
    temp2->next = temp1->next;
  
    //sterg nodul
    delete temp1;
}
  
//functie de inserare a unui nod
void Linkedlist::insertNode(int data)
{
    //creez nod nou
    Node* newNode = new Node(data);
    
    // il pun head
    if (head == NULL) {
        head = newNode;
        return;
    }
  
    //mergem la finalul listei
    Node* temp = head;
    while (temp->next != NULL)
        temp = temp->next;
  
    //inserez la finalul listei
    temp->next = newNode;
}
  
//functie de afisare a nodurilor din lista
void Linkedlist::printList()
{
    Node* temp = head;
  
    //verific daca lista e goala
    if (head == NULL) {
        cout << "Lista goala" << endl;
        return;
    }
  
    //parcurg toata lista
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
}
int main()
{
    // PROBLEMA 4 
    Linkedlist list4;
    list4.insertInOrder(4);
    list4.insertInOrder(6);
    list4.insertInOrder(8);


    Linkedlist list5;
    list5.insertInOrder(1);
    list5.insertInOrder(2);
    list5.insertInOrder(5);
    list5.insertInOrder(9);
    list5.insertInOrder(9);

    cout<<"prima lista este: ";
    list4.printList();
    cout<<'\n';
    cout<<"a doua lista este: ";
    list5.printList();
    cout<<'\n';

    vector<int> v;
    Node *head1=list4.getHead();
    Node *head2=list5.getHead();
    while(head1!=NULL) //punem valorile din prima lista in vector
    {
        v.push_back(head1->data);
        head1=head1->next;
    }
    while(head2!=NULL){
        v.push_back(head2->data);
        head2=head2->next; //punem valorile din a doua lista in vector
    }
    sort(v.begin(),v.end()); //sortam vectorul
    Node* rez=new Node(-1);
    Node *temp = rez;
    for(int i=0;i<v.size();i++){
        rez->next= new Node(v[i]);
        rez=rez->next;
    }
    temp=temp->next;

    cout<<"lista finala este: ";
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    return 0;

}
